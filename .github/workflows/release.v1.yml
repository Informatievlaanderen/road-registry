name: Release V1

on:
  workflow_dispatch:

jobs:
  build:
    if: github.repository_owner == 'Informatievlaanderen'
    name: Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: E@syP@ssw0rd
          MSSQL_TCP_PORT: 1433
        ports:
          - 1433:1433

    steps:
    - name: Log file system info
      shell: bash
      run: |
        sudo df -h
        
    - name: Delete unnecessary folders
      run: |
        sudo rm -rf /opt/hostedtoolcache
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Log file system info
      shell: bash
      run: |
        sudo df -h
        
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
          persist-credentials: false

    - name: Log file system info
      shell: bash
      run: |
        sudo df -h
        
    - name: Cache NPM
      uses: actions/cache@v3
      env:
        cache-name: cache-npm
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Cache Paket
      uses: actions/cache@v3
      env:
        cache-name: cache-paket
      with:
        path: packages
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Cache Python
      uses: actions/cache@v3
      env:
        cache-name: cache-pip
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
      shell: bash

    - name: Setup Node.js
      uses: actions/setup-node@v3.5.1
      with:
          node-version: 18.12.1

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.101
          ${{ secrets.VBR_DOTNET_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Node version
      shell: bash
      run: node --version

    - name: .NET version
      shell: bash
      run: dotnet --info

    - name: Python version
      shell: bash
      run: python --version

    - name: Install NPM dependencies
      shell: bash
      run: npm ci
      env:
        NPM_TOKEN: ${{ secrets.VBR_WEBCOMP_NPM_TOKEN }}

    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install requests markdown argparse

    - name: Log file system info
      shell: bash
      run: |
        sudo df -h
 
    - name: Run Semantic Release
      shell: bash
      run: npx semantic-release
      env:
        BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
        GITHUB_TOKEN: ${{ secrets.VBR_GIT_RELEASE_TOKEN }}
        GIT_COMMIT: ${{ github.sha }}
        GIT_USERNAME: ${{ secrets.VBR_GIT_USER }}
        GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        SA_PASSWORD: E@syP@ssw0rd
        NPM_TOKEN: ${{ secrets.VBR_WEBCOMP_NPM_TOKEN }}
        CI: true

    - name: Set Release Version
      id: set-version
      run: |
        [ ! -f semver ] && echo none > semver
        echo ::set-output name=version::$(cat semver)
        echo $(cat semver)
        echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
      shell: bash

     #
     # Save artifacts
     #

    - name: Log file system info
      shell: bash
      run: |
        sudo df -h
 
    - name: Save artifacts
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: |
        declare -a apps=(
          "adminhost:RoadRegistry.AdminHost"
          "backoffice-api:RoadRegistry.BackOffice.Api"
          "backoffice-commandhost:RoadRegistry.BackOffice.CommandHost"
          "backoffice-eventhost:RoadRegistry.BackOffice.EventHost"
          "backoffice-extracthost:RoadRegistry.BackOffice.ExtractHost"
          "backoffice-messaginghost-sqs:RoadRegistry.BackOffice.MessagingHost.Sqs"
          "backoffice-ui:RoadRegistry.BackOffice.UI"
          "editor-projectionhost:RoadRegistry.Editor.ProjectionHost"
          "extract-legacy:RoadRegistry.Legacy.Extract"
          "import-legacy:RoadRegistry.Legacy.Import"
          "producer-snapshot-projectionhost:RoadRegistry.Producer.Snapshot.ProjectionHost"
          "product-projectionhost:RoadRegistry.Product.ProjectionHost"
          "projector:RoadRegistry.Projector"
          "syndication-projectionhost:RoadRegistry.Syndication.ProjectionHost"
          "streetnameconsumer-projectionhost:RoadRegistry.StreetNameConsumer.ProjectionHost"
          "wfs-projectionhost:RoadRegistry.Wfs.ProjectionHost"
          "wms-projectionhost:RoadRegistry.Wms.ProjectionHost"
        )

        for app in "${apps[@]}"
        do
          data=(${app//:/ })

          docker image save $BUILD_DOCKER_REGISTRY/road-registry/${data[0]}:$SEMVER -o ~/rr-${data[0]}-image.tar
          
          rm -rf src/${data[1]}
          rm -rf dist/${data[1]}
        done
      env:
        BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
        SEMVER: ${{ env.RELEASE_VERSION }}

    - name: Log file system info
      shell: bash
      run: |
        sudo df -h
 
    #
    # Upload NuGet packages
    #
    
    - name: Upload NuGet package BackOffice
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: nuget-backoffice
        path: dist/nuget/Be.Vlaanderen.Basisregisters.RoadRegistry.BackOffice.*.nupkg
      env:
        SEMVER: ${{ env.RELEASE_VERSION }}
    
    - name: Upload NuGet package BackOffice.Api
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: nuget-backoffice-api
        path: dist/nuget/Be.Vlaanderen.Basisregisters.RoadRegistry.BackOffice.Api.*.nupkg
      env:
        SEMVER: ${{ env.RELEASE_VERSION }}
    
    - name: Upload NuGet package BackOffice.Abstractions
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: nuget-backoffice-abstractions
        path: dist/nuget/Be.Vlaanderen.Basisregisters.RoadRegistry.BackOffice.Abstractions.*.nupkg
      env:
        SEMVER: ${{ env.RELEASE_VERSION }}
    
    - name: Upload NuGet package BackOffice.ZipArchiveWriters
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: nuget-backoffice-ziparchivewriters
        path: dist/nuget/Be.Vlaanderen.Basisregisters.RoadRegistry.BackOffice.ZipArchiveWriters.*.nupkg
      env:
        SEMVER: ${{ env.RELEASE_VERSION }}

    #
    # Upload build artifacts
    #
    
    - name: Upload adminhost artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: adminhost
        path: ~/rr-adminhost-image.tar

    - name: Upload projector artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: projector
        path: ~/rr-projector-image.tar

    - name: Upload backoffice-api artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: backoffice-api
        path: ~/rr-backoffice-api-image.tar

    - name: Upload backoffice-ui artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: backoffice-ui
        path: ~/rr-backoffice-ui-image.tar

    - name: Upload editor-projectionhost artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: editor-projectionhost
        path: ~/rr-editor-projectionhost-image.tar

    - name: Upload product-projectionhost artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: product-projectionhost
        path: ~/rr-product-projectionhost-image.tar

    - name: Upload producer-snapshot-projectionhost
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: producer-snapshot-projectionhost
        path: ~/rr-producer-snapshot-projectionhost-image.tar
   
    - name: Upload syndication-projectionhost artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: syndication-projectionhost
        path: ~/rr-syndication-projectionhost-image.tar

    - name: Upload wms-projectionhost artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: wms-projectionhost
        path: ~/rr-wms-projectionhost-image.tar

    - name: Upload wfs-projectionhost artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: wfs-projectionhost
        path: ~/rr-wfs-projectionhost-image.tar

    - name: Upload backoffice-eventhost artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: backoffice-eventhost
        path: ~/rr-backoffice-eventhost-image.tar

    - name: Upload backoffice-extracthost artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: backoffice-extracthost
        path: ~/rr-backoffice-extracthost-image.tar

    - name: Upload backoffice-commandhost artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: backoffice-commandhost
        path: ~/rr-backoffice-commandhost-image.tar

    - name: Upload backoffice-messaginghost-sqs artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: backoffice-messaginghost-sqs
        path: ~/rr-backoffice-messaginghost-sqs-image.tar

    - name: Upload import-legacy artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: import-legacy
        path: ~/rr-import-legacy-image.tar

    - name: Upload extract-legacy artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: extract-legacy
        path: ~/rr-extract-legacy-image.tar

    - name: Upload streetnameconsumer-projectionhost artifact
      if: env.RELEASE_VERSION != 'none'
      uses: actions/upload-artifact@v3
      with:
        name: streetnameconsumer-projectionhost
        path: ~/rr-streetnameconsumer-projectionhost-image.tar

    - name: Package Lambda functions
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: |
        pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.BackOffice.Handlers.Sqs.Lambda/linux
        zip -r lambda.zip .
        popd
        
        pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.Snapshot.Handlers.Sqs.Lambda/linux
        zip -r lambda.zip .
        popd

    - name: Configure AWS credentials (Test)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

    - name: Login to Amazon ECR (Test)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/amazon-ecr-login@v1.5.3

    - name: Push Lambda functions to S3 Test
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: |
        pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.BackOffice.Handlers.Sqs.Lambda/linux
        aws s3 cp lambda.zip s3://196194905350-vbr-test-lam-rr-sqsbackoffice/$SEMVER/lambda.zip --sse aws:kms
        popd
        
        pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.Snapshot.Handlers.Sqs.Lambda/linux
        aws s3 cp lambda.zip s3://196194905350-vbr-test-lam-rr-sqssnapshot/$SEMVER/lambda.zip --sse aws:kms
        popd
      env:
        SEMVER: ${{ env.RELEASE_VERSION }}

    - name: Configure AWS credentials (Staging)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.VBR_AWS_REGION }}

    - name: Login to Amazon ECR (Staging)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/amazon-ecr-login@v1.5.3

    - name: Push Lambda functions to S3 Staging
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: |
        pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.BackOffice.Handlers.Sqs.Lambda/linux
        aws s3 cp lambda.zip s3://s3-vbr-stg-basisregisters-lam-wr-sqsbackofficehandlerfunction/$SEMVER/lambda.zip
        popd
        
        pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.Snapshot.Handlers.Sqs.Lambda/linux
        aws s3 cp lambda.zip s3://s3-vbr-stg-basisregisters-lam-wr-sqssnapshothandlerfunction/$SEMVER/lambda.zip
        popd
      env:
        SEMVER: ${{ env.RELEASE_VERSION }}
        
    - name: Configure AWS credentials (Production)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_PRD }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_PRD }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

    - name: Login to Amazon ECR (Production)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/amazon-ecr-login@v1.5.3

    - name: Push Lambda functions to S3 Production
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: |
       pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.BackOffice.Handlers.Sqs.Lambda/linux
       aws s3 cp lambda.zip s3://s3-vbr-prd-basisregisters-lam-wr-sqsbackofficehandlerfunction/$SEMVER/lambda.zip
       popd
       
       pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.Snapshot.Handlers.Sqs.Lambda/linux
       aws s3 cp lambda.zip s3://s3-vbr-prd-basisregisters-lam-wr-sqssnapshothandlerfunction/$SEMVER/lambda.zip
       popd
      env:
       SEMVER: ${{ env.RELEASE_VERSION }}
        
    - name: Configure AWS credentials (New Production)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_NEWPRD }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_NEWPRD }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

    - name: Login to Amazon ECR (New Production)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/amazon-ecr-login@v1.5.3

    - name: Push Lambda functions to S3 New Production
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: |
       pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.BackOffice.Handlers.Sqs.Lambda/linux
       aws s3 cp lambda.zip s3://077849980894-vbr-prd-lam-rr-sqsbackoffice/$SEMVER/lambda.zip
       popd
       
       pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.Snapshot.Handlers.Sqs.Lambda/linux
       aws s3 cp lambda.zip s3://077849980894-vbr-prd-lam-rr-sqssnapshot/$SEMVER/lambda.zip
       popd
      env:
       SEMVER: ${{ env.RELEASE_VERSION }}

  publish_to_atlassian:
    if: needs.build.outputs.version != 'none'
    needs: build
    name: Publish to Atlassian
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Cache Paket
        uses: actions/cache@v3
        env:
          cache-name: cache-paket
        with:
          path: packages
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Cache Python
        uses: actions/cache@v3
        env:
          cache-name: cache-pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install requests markdown argparse

      - name: Publish to Confluence
        if: needs.build.outputs.version != 'none'
        shell: bash
        run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-confluence.sh
        env:
          CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
          CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
          CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}

      - name: Create Jira Release
        if: env.RELEASE_VERSION != 'none'
        shell: bash
        run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-jira.sh
        env:
          CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
          CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
          CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}
          JIRA_PREFIX: Road
          JIRA_PROJECT: WR
          JIRA_VERSION: ${{ needs.build.outputs.version }}

  publish_to_nuget:
    if: needs.build.outputs.version != 'none'
    needs: build
    name: Publish to NuGet
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ secrets.VBR_DOTNET_VERSION }}

    - name: .NET version
      shell: bash
      run: dotnet --info

    - name: Download NuGet package BackOffice
      if: env.RELEASE_VERSION != 'none'
      uses: actions/download-artifact@v3
      with:
        name: nuget-backoffice
        path: ~/

    - name: Download NuGet package BackOffice.Api
      if: env.RELEASE_VERSION != 'none'
      uses: actions/download-artifact@v3
      with:
        name: nuget-backoffice-api
        path: ~/

    - name: Download NuGet package BackOffice.Abstractions
      if: env.RELEASE_VERSION != 'none'
      uses: actions/download-artifact@v3
      with:
        name: nuget-backoffice-abstractions
        path: ~/

    - name: Download NuGet package BackOffice.ZipArchiveWriters
      if: env.RELEASE_VERSION != 'none'
      uses: actions/download-artifact@v3
      with:
        name: nuget-backoffice-ziparchivewriters
        path: ~/

    - name: Publish packages to NuGet
      shell: bash
      run: |
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.RoadRegistry.BackOffice.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.RoadRegistry.BackOffice.Api.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.RoadRegistry.BackOffice.Abstractions.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.RoadRegistry.BackOffice.ZipArchiveWriters.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
      env:
        SEMVER: ${{ needs.build.outputs.version }}
        WORKSPACE: ${{ github.workspace }}
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
  
  push_images_to_test:
    if: needs.build.outputs.version != 'none'
    needs: build
    name: Push images to Test
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials (Test)
        if: needs.build.outputs.version != 'none'
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR (Test)
        if: needs.build.outputs.version != 'none'
        uses: aws-actions/amazon-ecr-login@v1.5.3

      #
      # Download artifacts
      #
      
      - name: Download adminhost
        uses: actions/download-artifact@v3
        with:
          name: adminhost
          path: ~/
      
      - name: Download projector
        uses: actions/download-artifact@v3
        with:
          name: projector
          path: ~/
      
      - name: Download backoffice-api
        uses: actions/download-artifact@v3
        with:
          name: backoffice-api
          path: ~/
      
      - name: Download backoffice-ui
        uses: actions/download-artifact@v3
        with:
          name: backoffice-ui
          path: ~/
      
      - name: Download editor-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: editor-projectionhost
          path: ~/
      
      - name: Download product-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: product-projectionhost
          path: ~/
      
      - name: Download producer-snapshot-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: producer-snapshot-projectionhost
          path: ~/
      
      - name: Download syndication-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: syndication-projectionhost
          path: ~/
      
      - name: Download wms-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: wms-projectionhost
          path: ~/
      
      - name: Download wfs-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: wfs-projectionhost
          path: ~/
      
      - name: Download backoffice-eventhost
        uses: actions/download-artifact@v3
        with:
          name: backoffice-eventhost
          path: ~/
      
      - name: Download backoffice-extracthost
        uses: actions/download-artifact@v3
        with:
          name: backoffice-extracthost
          path: ~/
      
      - name: Download backoffice-commandhost
        uses: actions/download-artifact@v3
        with:
          name: backoffice-commandhost
          path: ~/
      
      - name: Download backoffice-messaginghost-sqs
        uses: actions/download-artifact@v3
        with:
          name: backoffice-messaginghost-sqs
          path: ~/
      
      - name: Download import-legacy
        uses: actions/download-artifact@v3
        with:
          name: import-legacy
          path: ~/

      - name: Download extract-legacy
        uses: actions/download-artifact@v3
        with:
          name: extract-legacy
          path: ~/

      - name: Download streetnameconsumer-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: streetnameconsumer-projectionhost
          path: ~/
      
      #
      # Load artifacts
      #
      
      - name: Load artifacts
        shell: bash
        run: |
          docker image load -i ~/rr-adminhost-image.tar
          docker image load -i ~/rr-projector-image.tar
          docker image load -i ~/rr-backoffice-api-image.tar
          docker image load -i ~/rr-backoffice-ui-image.tar
          docker image load -i ~/rr-editor-projectionhost-image.tar
          docker image load -i ~/rr-product-projectionhost-image.tar
          docker image load -i ~/rr-producer-snapshot-projectionhost-image.tar
          docker image load -i ~/rr-syndication-projectionhost-image.tar
          docker image load -i ~/rr-wms-projectionhost-image.tar
          docker image load -i ~/rr-wfs-projectionhost-image.tar
          docker image load -i ~/rr-backoffice-eventhost-image.tar
          docker image load -i ~/rr-backoffice-extracthost-image.tar
          docker image load -i ~/rr-backoffice-commandhost-image.tar
          docker image load -i ~/rr-backoffice-messaginghost-sqs-image.tar
          docker image load -i ~/rr-import-legacy-image.tar
          docker image load -i ~/rr-extract-legacy-image.tar
          docker image load -i ~/rr-streetnameconsumer-projectionhost-image.tar

      - name: Push artifacts to ECR Test
        if: needs.build.outputs.version != 'none'
        shell: bash
        run: |
          echo $SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/adminhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/projector:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-api:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-ui:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/editor-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/product-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/producer-snapshot-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/syndication-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/wms-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/wfs-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-eventhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-extracthost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-commandhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-messaginghost-sqs:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/import-legacy:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/extract-legacy:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/streetnameconsumer-projectionhost:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          SEMVER: ${{ needs.build.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

  push_images_to_staging:
    if: needs.build.outputs.version != 'none'
    needs: build
    name: Push images to Staging
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials (Staging)
        if: needs.build.outputs.version != 'none'
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR (Staging)
        if: needs.build.outputs.version != 'none'
        uses: aws-actions/amazon-ecr-login@v1.5.3

      #
      # Download artifacts
      #
      
      - name: Download adminhost
        uses: actions/download-artifact@v3
        with:
          name: adminhost
          path: ~/
      
      - name: Download projector
        uses: actions/download-artifact@v3
        with:
          name: projector
          path: ~/
      
      - name: Download backoffice-api
        uses: actions/download-artifact@v3
        with:
          name: backoffice-api
          path: ~/
      
      - name: Download backoffice-ui
        uses: actions/download-artifact@v3
        with:
          name: backoffice-ui
          path: ~/
      
      - name: Download editor-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: editor-projectionhost
          path: ~/
      
      - name: Download product-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: product-projectionhost
          path: ~/
      
      - name: Download producer-snapshot-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: producer-snapshot-projectionhost
          path: ~/
      
      - name: Download syndication-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: syndication-projectionhost
          path: ~/
      
      - name: Download wms-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: wms-projectionhost
          path: ~/
      
      - name: Download wfs-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: wfs-projectionhost
          path: ~/
      
      - name: Download backoffice-eventhost
        uses: actions/download-artifact@v3
        with:
          name: backoffice-eventhost
          path: ~/
      
      - name: Download backoffice-extracthost
        uses: actions/download-artifact@v3
        with:
          name: backoffice-extracthost
          path: ~/
      
      - name: Download backoffice-commandhost
        uses: actions/download-artifact@v3
        with:
          name: backoffice-commandhost
          path: ~/
      
      - name: Download backoffice-messaginghost-sqs
        uses: actions/download-artifact@v3
        with:
          name: backoffice-messaginghost-sqs
          path: ~/
      
      - name: Download import-legacy
        uses: actions/download-artifact@v3
        with:
          name: import-legacy
          path: ~/

      - name: Download extract-legacy
        uses: actions/download-artifact@v3
        with:
          name: extract-legacy
          path: ~/

      - name: Download streetnameconsumer-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: streetnameconsumer-projectionhost
          path: ~/
      
      #
      # Load artifacts
      #

      - name: Load artifacts
        shell: bash
        run: |
          docker image load -i ~/rr-adminhost-image.tar
          docker image load -i ~/rr-projector-image.tar
          docker image load -i ~/rr-backoffice-api-image.tar
          docker image load -i ~/rr-backoffice-ui-image.tar
          docker image load -i ~/rr-editor-projectionhost-image.tar
          docker image load -i ~/rr-product-projectionhost-image.tar
          docker image load -i ~/rr-producer-snapshot-projectionhost-image.tar
          docker image load -i ~/rr-syndication-projectionhost-image.tar
          docker image load -i ~/rr-wms-projectionhost-image.tar
          docker image load -i ~/rr-wfs-projectionhost-image.tar
          docker image load -i ~/rr-backoffice-eventhost-image.tar
          docker image load -i ~/rr-backoffice-extracthost-image.tar
          docker image load -i ~/rr-backoffice-commandhost-image.tar
          docker image load -i ~/rr-backoffice-messaginghost-sqs-image.tar
          docker image load -i ~/rr-import-legacy-image.tar
          docker image load -i ~/rr-extract-legacy-image.tar
          docker image load -i ~/rr-streetnameconsumer-projectionhost-image.tar

      - name: Push artifacts to ECR Staging
        if: env.RELEASE_VERSION != 'none'
        shell: bash
        run: |
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/adminhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/adminhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/adminhost:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/projector:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/projector:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/projector:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-api:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-api:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-api:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-ui:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-ui:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-ui:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/editor-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/editor-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/editor-projectionhost:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/product-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/product-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/product-projectionhost:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/producer-snapshot-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/producer-snapshot-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/producer-snapshot-projectionhost:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/syndication-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/syndication-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/syndication-projectionhost:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/wms-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/wms-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/wms-projectionhost:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/wfs-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/wfs-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/wfs-projectionhost:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-eventhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-eventhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-eventhost:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-extracthost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-extracthost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-extracthost:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-commandhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-commandhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-commandhost:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-messaginghost-sqs:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-messaginghost-sqs:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-messaginghost-sqs:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/import-legacy:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/import-legacy:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/import-legacy:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/extract-legacy:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/extract-legacy:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/extract-legacy:$SEMVER
      
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/streetnameconsumer-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/streetnameconsumer-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/streetnameconsumer-projectionhost:$SEMVER

        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY }}
          SEMVER: ${{ needs.build.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

  push_images_to_production:
    if: needs.build.outputs.version != 'none'
    needs: build
    name: Push images to Production
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials (Production)
        if: needs.build.outputs.version != 'none'
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_PRD }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_PRD }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR (Production)
        if: needs.build.outputs.version != 'none'
        uses: aws-actions/amazon-ecr-login@v1.5.1

      #
      # Download artifacts
      #
      
      - name: Download adminhost
        uses: actions/download-artifact@v3
        with:
          name: adminhost
          path: ~/
      
      - name: Download projector
        uses: actions/download-artifact@v3
        with:
          name: projector
          path: ~/
      
      - name: Download backoffice-api
        uses: actions/download-artifact@v3
        with:
          name: backoffice-api
          path: ~/
      
      - name: Download backoffice-ui
        uses: actions/download-artifact@v3
        with:
          name: backoffice-ui
          path: ~/
      
      - name: Download editor-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: editor-projectionhost
          path: ~/
      
      - name: Download product-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: product-projectionhost
          path: ~/
      
      - name: Download producer-snapshot-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: producer-snapshot-projectionhost
          path: ~/
      
      - name: Download syndication-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: syndication-projectionhost
          path: ~/
      
      - name: Download wms-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: wms-projectionhost
          path: ~/
      
      - name: Download wfs-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: wfs-projectionhost
          path: ~/
      
      - name: Download backoffice-eventhost
        uses: actions/download-artifact@v3
        with:
          name: backoffice-eventhost
          path: ~/
      
      - name: Download backoffice-extracthost
        uses: actions/download-artifact@v3
        with:
          name: backoffice-extracthost
          path: ~/
      
      - name: Download backoffice-commandhost
        uses: actions/download-artifact@v3
        with:
          name: backoffice-commandhost
          path: ~/
      
      - name: Download backoffice-messaginghost-sqs
        uses: actions/download-artifact@v3
        with:
          name: backoffice-messaginghost-sqs
          path: ~/
      
      - name: Download import-legacy
        uses: actions/download-artifact@v3
        with:
          name: import-legacy
          path: ~/

      - name: Download extract-legacy
        uses: actions/download-artifact@v3
        with:
          name: extract-legacy
          path: ~/

      - name: Download streetnameconsumer-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: streetnameconsumer-projectionhost
          path: ~/
      
      #
      # Load artifacts
      #

      - name: Load artifacts
        shell: bash
        run: |
          docker image load -i ~/rr-adminhost-image.tar
          docker image load -i ~/rr-projector-image.tar
          docker image load -i ~/rr-backoffice-api-image.tar
          docker image load -i ~/rr-backoffice-ui-image.tar
          docker image load -i ~/rr-editor-projectionhost-image.tar
          docker image load -i ~/rr-product-projectionhost-image.tar
          docker image load -i ~/rr-producer-snapshot-projectionhost-image.tar
          docker image load -i ~/rr-syndication-projectionhost-image.tar
          docker image load -i ~/rr-wms-projectionhost-image.tar
          docker image load -i ~/rr-wfs-projectionhost-image.tar
          docker image load -i ~/rr-backoffice-eventhost-image.tar
          docker image load -i ~/rr-backoffice-extracthost-image.tar
          docker image load -i ~/rr-backoffice-commandhost-image.tar
          docker image load -i ~/rr-backoffice-messaginghost-sqs-image.tar
          docker image load -i ~/rr-import-legacy-image.tar
          docker image load -i ~/rr-extract-legacy-image.tar
          docker image load -i ~/rr-streetnameconsumer-projectionhost-image.tar

      - name: Push artifacts to ECR Production
        if: env.RELEASE_VERSION != 'none'
        shell: bash
        run: |
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/adminhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/adminhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/adminhost:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/projector:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/projector:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/projector:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-ui:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-ui:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-ui:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-api:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-api:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-api:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/editor-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/editor-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/editor-projectionhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/product-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/product-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/product-projectionhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/producer-snapshot-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/producer-snapshot-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/producer-snapshot-projectionhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/syndication-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/syndication-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/syndication-projectionhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/wms-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/wms-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/wms-projectionhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/wfs-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/wfs-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/wfs-projectionhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-eventhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-eventhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-eventhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-extracthost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-extracthost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-extracthost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-commandhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-commandhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-commandhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-messaginghost-sqs:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-messaginghost-sqs:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-messaginghost-sqs:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/import-legacy:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/import-legacy:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/import-legacy:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/extract-legacy:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/extract-legacy:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/extract-legacy:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/streetnameconsumer-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/streetnameconsumer-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/streetnameconsumer-projectionhost:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_PRD }}
          SEMVER: ${{ needs.build.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

  push_images_to_newproduction:
    if: needs.build.outputs.version != 'none'
    needs: build
    name: Push images to New Production
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials (New Production)
        if: needs.build.outputs.version != 'none'
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_NEWPRD }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_NEWPRD }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR (New Production)
        if: needs.build.outputs.version != 'none'
        uses: aws-actions/amazon-ecr-login@v1.5.1

      #
      # Download artifacts
      #
      
      - name: Download adminhost
        uses: actions/download-artifact@v3
        with:
          name: adminhost
          path: ~/
      
      - name: Download projector
        uses: actions/download-artifact@v3
        with:
          name: projector
          path: ~/
      
      - name: Download backoffice-api
        uses: actions/download-artifact@v3
        with:
          name: backoffice-api
          path: ~/
      
      - name: Download backoffice-ui
        uses: actions/download-artifact@v3
        with:
          name: backoffice-ui
          path: ~/
      
      - name: Download editor-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: editor-projectionhost
          path: ~/
      
      - name: Download product-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: product-projectionhost
          path: ~/
      
      - name: Download producer-snapshot-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: producer-snapshot-projectionhost
          path: ~/
      
      - name: Download syndication-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: syndication-projectionhost
          path: ~/
      
      - name: Download wms-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: wms-projectionhost
          path: ~/
      
      - name: Download wfs-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: wfs-projectionhost
          path: ~/
      
      - name: Download backoffice-eventhost
        uses: actions/download-artifact@v3
        with:
          name: backoffice-eventhost
          path: ~/
      
      - name: Download backoffice-extracthost
        uses: actions/download-artifact@v3
        with:
          name: backoffice-extracthost
          path: ~/
      
      - name: Download backoffice-commandhost
        uses: actions/download-artifact@v3
        with:
          name: backoffice-commandhost
          path: ~/
      
      - name: Download backoffice-messaginghost-sqs
        uses: actions/download-artifact@v3
        with:
          name: backoffice-messaginghost-sqs
          path: ~/
      
      - name: Download import-legacy
        uses: actions/download-artifact@v3
        with:
          name: import-legacy
          path: ~/

      - name: Download extract-legacy
        uses: actions/download-artifact@v3
        with:
          name: extract-legacy
          path: ~/

      - name: Download streetnameconsumer-projectionhost
        uses: actions/download-artifact@v3
        with:
          name: streetnameconsumer-projectionhost
          path: ~/
      
      #
      # Load artifacts
      #

      - name: Load artifacts
        shell: bash
        run: |
          docker image load -i ~/rr-adminhost-image.tar
          docker image load -i ~/rr-projector-image.tar
          docker image load -i ~/rr-backoffice-api-image.tar
          docker image load -i ~/rr-backoffice-ui-image.tar
          docker image load -i ~/rr-editor-projectionhost-image.tar
          docker image load -i ~/rr-product-projectionhost-image.tar
          docker image load -i ~/rr-producer-snapshot-projectionhost-image.tar
          docker image load -i ~/rr-syndication-projectionhost-image.tar
          docker image load -i ~/rr-wms-projectionhost-image.tar
          docker image load -i ~/rr-wfs-projectionhost-image.tar
          docker image load -i ~/rr-backoffice-eventhost-image.tar
          docker image load -i ~/rr-backoffice-extracthost-image.tar
          docker image load -i ~/rr-backoffice-commandhost-image.tar
          docker image load -i ~/rr-backoffice-messaginghost-sqs-image.tar
          docker image load -i ~/rr-import-legacy-image.tar
          docker image load -i ~/rr-extract-legacy-image.tar
          docker image load -i ~/rr-streetnameconsumer-projectionhost-image.tar

      - name: Push artifacts to ECR New Production
        if: env.RELEASE_VERSION != 'none'
        shell: bash
        run: |
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/adminhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/adminhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/adminhost:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/projector:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/projector:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/projector:$SEMVER

          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-ui:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-ui:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-ui:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-api:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-api:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-api:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/editor-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/editor-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/editor-projectionhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/product-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/product-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/product-projectionhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/producer-snapshot-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/producer-snapshot-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/producer-snapshot-projectionhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/syndication-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/syndication-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/syndication-projectionhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/wms-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/wms-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/wms-projectionhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/wfs-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/wfs-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/wfs-projectionhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-eventhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-eventhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-eventhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-extracthost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-extracthost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-extracthost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-commandhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-commandhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-commandhost:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-messaginghost-sqs:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-messaginghost-sqs:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-messaginghost-sqs:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/import-legacy:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/import-legacy:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/import-legacy:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/extract-legacy:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/extract-legacy:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/extract-legacy:$SEMVER
  
          docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/streetnameconsumer-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/streetnameconsumer-projectionhost:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/road-registry/streetnameconsumer-projectionhost:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_NEWPRD }}
          SEMVER: ${{ needs.build.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

  deploy_to_test_start_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [push_images_to_test, build]
    name: Deploy to test started
    environment: test
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment started
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-wegenregister-dev'
        slack-message: Deployment of road-registry ${{ env.RELEASE_VERSION }} to tst has started
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}


  deploy_to_test:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [deploy_to_test_start_slack, build]
    name: Deploy to test
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        services: [
          'road-registry-adminhost',
          'road-registry-backoffice-commandhost',
          'road-registry-backoffice-messaginghost-sqs',
          'road-registry-backoffice-eventhost',
          'road-registry-backoffice-extracthost',
          'road-registry-backoffice-api',
          'road-registry-backoffice-ui',
          'road-registry-product-projectionhost',
          'road-registry-wms-projectionhost',
          'road-registry-wfs-projectionhost',
          'road-registry-editor-projectionhost',
          'road-registry-syndication-projectionhost',
          'road-registry-projector',
          'road-registry-producer-snapshot-projectionhost',
          'road-registry-streetnameconsumer-projectionhost'
        ]

    steps:
    - name: Deploy services
      env:
        BUILD_URL: ${{ secrets.VBR_AWS_BUILD_API }}/${{matrix.services}}
        STATUS_URL: ${{ secrets.VBR_AWS_BUILD_STATUS_API }}/${{matrix.services}}
      uses: informatievlaanderen/awscurl-polling-action/polling-action@main
      with:
          environment: test
          version: ${{ needs.build.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID }}
          secret-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY }}
          region: eu-west-1
          interval: 2

    - name: Deploy services output
      shell: bash
      run: |
        echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
        echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
        echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deploy_lambda_to_test:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [deploy_to_test, build]
    name: Deploy lambda to test
    runs-on: ubuntu-latest
    
    steps:
    - name: CD Lambda(s) Configure credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}
        
    - name: Prepare Lambda(s)
      shell: bash
      run: |
        aws s3 cp s3://196194905350-vbr-test-lam-rr-sqsbackoffice/$VERSION/lambda.zip s3://196194905350-vbr-test-lam-rr-sqsbackoffice/lambda.zip --copy-props none
        aws s3 cp s3://196194905350-vbr-test-lam-rr-sqssnapshot/$VERSION/lambda.zip s3://196194905350-vbr-test-lam-rr-sqssnapshot/lambda.zip --copy-props none
      env:
        VERSION: ${{ needs.build.outputs.version }}
        
    - name: Promote Lambda(s)
      shell: bash
      run: |
        docker pull ghcr.io/okigan/awscurl:latest

        docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "wr-sqsbackofficehandlerfunction", "project": "basisregisters", "domain": "basisregisters" }' $PROMOTEURL/test
        docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "wr-sqssnapshothandlerfunction", "project": "basisregisters", "domain": "basisregisters" }' $PROMOTEURL/test
      env:
        ACCESS_KEY_ID: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
        SECRET_ACCESS_KEY_ID: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
        REGION: ${{ secrets.VBR_AWS_REGION_PRD }}
        PROMOTEURL: ${{ secrets.VBR_AWS_PROMOTE_LAMBDA_BASEURL }}

  deploy_to_test_finish_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [deploy_lambda_to_test]
    name: Deploy to test finished
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment finished
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-wegenregister-dev'
        slack-message: Deployment of road-registry ${{ env.RELEASE_VERSION }} to tst has finished
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
  
        
  deploy_to_staging_start_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [push_images_to_staging, deploy_to_test_finish_slack, build]
    name: Deploy to staging started
    environment: stg
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment started
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-wegenregister-dev'
        slack-message: Deployment of road-registry ${{ env.RELEASE_VERSION }} to stg has started
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
        
  deploy_to_staging:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [deploy_to_staging_start_slack, build]
    name: Deploy to staging
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        services: [
          'road-registry-adminhost',
          'road-registry-backoffice-commandhost',
          'road-registry-backoffice-messaginghost-sqs',
          'road-registry-backoffice-eventhost',
          'road-registry-backoffice-extracthost',
          'road-registry-backoffice-api',
          'road-registry-backoffice-ui',
          'road-registry-product-projectionhost',
          'road-registry-wms-projectionhost',
          'road-registry-wfs-projectionhost',
          'road-registry-editor-projectionhost',
          'road-registry-syndication-projectionhost',
          'road-registry-projector',
          'road-registry-producer-snapshot-projectionhost',
          'road-registry-streetnameconsumer-projectionhost'
        ]

    steps:
    - name: CD services
      env:
        BUILD_URL: ${{ secrets.VBR_AWS_BUILD_API }}/${{matrix.services}}
        STATUS_URL: ${{ secrets.VBR_AWS_BUILD_STATUS_API }}/${{matrix.services}}
      uses: informatievlaanderen/awscurl-polling-action/polling-action@main
      with:
          environment: stg
          version: ${{ needs.build.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID }}
          secret-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY }}
          region: eu-west-1
          interval: 2
          
    - name: output CD services
      shell: bash
      run: |
        echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
        echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
        echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deploy_lambda_to_staging:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [deploy_to_staging, build]
    name: Deploy lambda to staging
    runs-on: ubuntu-latest

    steps:
    - name: CD Lambda(s) Configure credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}
        
    - name: Prepare Lambda(s)
      shell: bash
      run: |
        aws s3 cp s3://s3-vbr-stg-basisregisters-lam-wr-sqsbackofficehandlerfunction/$VERSION/lambda.zip s3://s3-vbr-stg-basisregisters-lam-wr-sqsbackofficehandlerfunction/lambda.zip --copy-props none
        aws s3 cp s3://s3-vbr-stg-basisregisters-lam-wr-sqssnapshothandlerfunction/$VERSION/lambda.zip s3://s3-vbr-stg-basisregisters-lam-wr-sqssnapshothandlerfunction/lambda.zip --copy-props none
      env:
        VERSION: ${{ needs.build.outputs.version }}
        
    - name: Promote Lambda(s)
      shell: bash
      run: |
        docker pull ghcr.io/okigan/awscurl:latest
        
        docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "wr-sqsbackofficehandlerfunction", "project": "basisregisters", "domain": "basisregisters" }' $PROMOTEURL/stg
        docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "wr-sqssnapshothandlerfunction", "project": "basisregisters", "domain": "basisregisters" }' $PROMOTEURL/stg
      env:
        ACCESS_KEY_ID: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
        SECRET_ACCESS_KEY_ID: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
        REGION: ${{ secrets.VBR_AWS_REGION_PRD }}
        PROMOTEURL: ${{ secrets.VBR_AWS_PROMOTE_LAMBDA_BASEURL }}

  deploy_to_staging_finish_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [deploy_lambda_to_staging]
    name: Deploy to staging finished
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment finished
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-wegenregister-dev'
        slack-message: Deployment of road-registry ${{ env.RELEASE_VERSION }} to stg has finished
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}

  deploy_to_production_start_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [push_images_to_production, deploy_to_staging_finish_slack, build]
    name: Deploy to production started
    environment: prd
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment started
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-wegenregister-dev'
        slack-message: Deployment of road-registry ${{ env.RELEASE_VERSION }} to prd has started
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}

  deploy_to_production:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [deploy_to_production_start_slack, build]
    name: Deploy to Production
    runs-on: ubuntu-latest
    strategy:
       matrix: 
        services: [
          'road-registry-adminhost',
          'road-registry-backoffice-commandhost',
          'road-registry-backoffice-messaginghost-sqs',
          'road-registry-backoffice-eventhost',
          'road-registry-backoffice-extracthost',
          'road-registry-backoffice-api',
          'road-registry-backoffice-ui',
          'road-registry-product-projectionhost',
          'road-registry-wms-projectionhost',
          'road-registry-wfs-projectionhost',
          'road-registry-editor-projectionhost',
          'road-registry-syndication-projectionhost',
          'road-registry-projector',
          'road-registry-producer-snapshot-projectionhost',
          'road-registry-streetnameconsumer-projectionhost'
        ]
 
    steps:
    - name: CD services
      env:
        BUILD_URL: ${{ secrets.VBR_AWS_BUILD_API }}/${{matrix.services}}
        STATUS_URL: ${{ secrets.VBR_AWS_BUILD_STATUS_API }}/${{matrix.services}}
      uses: informatievlaanderen/awscurl-polling-action/polling-action@main
      with:
          environment: prd
          version: ${{ needs.build.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID }}
          secret-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY }}
          region: eu-west-1
          interval: 2

    - name: output CD services
      shell: bash
      run: |
        echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
        echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
        echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deploy_lambda_to_production:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [deploy_to_production, build]
    name: Deploy lambda to production
    runs-on: ubuntu-latest

    steps:
    - name: CD Lambda(s) Configure credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_PRD }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_PRD }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}
        
    - name: Prepare Lambda(s)
      shell: bash
      run: |
        aws s3 cp s3://s3-vbr-prd-basisregisters-lam-wr-sqsbackofficehandlerfunction/$VERSION/lambda.zip s3://s3-vbr-prd-basisregisters-lam-wr-sqsbackofficehandlerfunction/lambda.zip --copy-props none
        aws s3 cp s3://s3-vbr-prd-basisregisters-lam-wr-sqssnapshothandlerfunction/$VERSION/lambda.zip s3://s3-vbr-prd-basisregisters-lam-wr-sqssnapshothandlerfunction/lambda.zip --copy-props none
      env:
        VERSION: ${{ needs.build.outputs.version }}
        
    - name: Promote Lambda(s)
      shell: bash
      run: |
        docker pull ghcr.io/okigan/awscurl:latest
        
        docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "wr-sqsbackofficehandlerfunction", "project": "basisregisters", "domain": "basisregisters" }' $PROMOTEURL/prd
        docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "wr-sqssnapshothandlerfunction", "project": "basisregisters", "domain": "basisregisters" }' $PROMOTEURL/prd
      env:
        ACCESS_KEY_ID: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
        SECRET_ACCESS_KEY_ID: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
        REGION: ${{ secrets.VBR_AWS_REGION_PRD }}
        PROMOTEURL: ${{ secrets.VBR_AWS_PROMOTE_LAMBDA_BASEURL }}

  deploy_to_production_finish_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [deploy_lambda_to_production]
    name: Deploy to production finished
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment finished
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-wegenregister-dev'
        slack-message: Deployment of road-registry ${{ env.RELEASE_VERSION }} to prd has finished
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}

  deploy_to_newproduction_start_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [push_images_to_newproduction, deploy_to_production_finish_slack, build]
    name: Deploy to new production started
    environment: newprd
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment started
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-wegenregister-dev'
        slack-message: Deployment of road-registry ${{ env.RELEASE_VERSION }} to newprd has started
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}

  deploy_to_newproduction:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [deploy_to_newproduction_start_slack, build]
    name: Deploy to New Production
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        services: [
          'road-registry-adminhost',
          'road-registry-backoffice-commandhost',
          'road-registry-backoffice-messaginghost-sqs',
          'road-registry-backoffice-eventhost',
          'road-registry-backoffice-extracthost',
          'road-registry-backoffice-api',
          'road-registry-backoffice-ui',
          'road-registry-product-projectionhost',
          'road-registry-wms-projectionhost',
          'road-registry-wfs-projectionhost',
          'road-registry-editor-projectionhost',
          'road-registry-syndication-projectionhost',
          'road-registry-projector',
          'road-registry-producer-snapshot-projectionhost',
          'road-registry-streetnameconsumer-projectionhost'
        ]

    steps:
    - name: CD services
      env:
        BUILD_URL: ${{ secrets.VBR_AWS_BUILD_API }}/${{matrix.services}}
        STATUS_URL: ${{ secrets.VBR_AWS_BUILD_STATUS_API }}/${{matrix.services}}
      uses: informatievlaanderen/awscurl-polling-action/polling-action@main
      with:
          environment: prd
          version: ${{ needs.build.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID }}
          secret-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY }}
          region: eu-west-1
          interval: 2

    - name: output CD services
      shell: bash
      run: |
        echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
        echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
        echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deploy_lambda_to_newproduction:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [deploy_to_newproduction, build]
    name: Deploy lambda to new production
    runs-on: ubuntu-latest

    steps:
    - name: CD Lambda(s) Configure credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_NEWPRD }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_NEWPRD }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}
        
    - name: Prepare Lambda(s)
      shell: bash
      run: |
        aws s3 cp s3://077849980894-vbr-prd-lam-rr-sqsbackoffice/$VERSION/lambda.zip s3://077849980894-vbr-prd-lam-rr-sqsbackoffice/lambda.zip --copy-props none
        aws s3 cp s3://077849980894-vbr-prd-lam-rr-sqssnapshot/$VERSION/lambda.zip s3://077849980894-vbr-prd-lam-rr-sqssnapshot/lambda.zip --copy-props none
      env:
        VERSION: ${{ needs.build.outputs.version }}
        
    - name: Promote Lambda(s)
      shell: bash
      run: |
        docker pull ghcr.io/okigan/awscurl:latest
        
        docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "wr-sqsbackofficehandlerfunction", "project": "basisregisters", "domain": "basisregisters" }' $PROMOTEURL/acc
        docker run --rm okigan/awscurl --access_key $ACCESS_KEY_ID --secret_key $SECRET_ACCESS_KEY_ID --region $REGION -X POST -d '{ "functionName": "wr-sqssnapshothandlerfunction", "project": "basisregisters", "domain": "basisregisters" }' $PROMOTEURL/acc
      env:
        ACCESS_KEY_ID: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
        SECRET_ACCESS_KEY_ID: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
        REGION: ${{ secrets.VBR_AWS_REGION_PRD }}
        PROMOTEURL: ${{ secrets.VBR_AWS_PROMOTE_LAMBDA_BASEURL }}

  deploy_to_newproduction_finish_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [deploy_lambda_to_newproduction]
    name: Deploy to new production finished
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment finished
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-wegenregister-dev'
        slack-message: Deployment of road-registry ${{ env.RELEASE_VERSION }} to newprd has finished
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}
