name: Release

on:
  workflow_dispatch:

jobs:
  build:
    if: github.repository_owner == 'Informatievlaanderen'
    name: Build
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: E@syP@ssw0rd
          MSSQL_TCP_PORT: 1433
        ports:
          - 1433:1433

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
          persist-credentials: false

    - name: Cache NPM
      uses: actions/cache@v3
      env:
        cache-name: cache-npm
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Cache Paket
      uses: actions/cache@v3
      env:
        cache-name: cache-paket
      with:
        path: packages
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Cache Python
      uses: actions/cache@v3
      env:
        cache-name: cache-pip
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
      shell: bash

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
          node-version: 16.15.0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ secrets.VBR_DOTNET_VERSION }}

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Node version
      shell: bash
      run: node --version

    - name: .NET version
      shell: bash
      run: dotnet --info

    - name: Python version
      shell: bash
      run: python --version

    - name: Install NPM dependencies
      shell: bash
      run: npm install 
      env:
        NPM_TOKEN: ${{ secrets.VBR_WEBCOMP_NPM_TOKEN }}

    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install requests markdown argparse

    - name: Run Semantic Release
      shell: bash
      run: npx semantic-release
      env:
        BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
        GITHUB_TOKEN: ${{ secrets.VBR_GIT_RELEASE_TOKEN }}
        GIT_COMMIT: ${{ github.sha }}
        GIT_USERNAME: ${{ secrets.VBR_GIT_USER }}
        GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        SA_PASSWORD: E@syP@ssw0rd
        NPM_TOKEN: ${{ secrets.VBR_WEBCOMP_NPM_TOKEN }}
        CI: true

    - name: Set Release Version
      run: |
        [ ! -f semver ] && echo none > semver
        echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
      shell: bash

    - name: Package Lambda functions
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: |
        echo Zip lambda functions
        pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.BackOffice.Handlers.Sqs.Lambda/linux
        echo zip -r lambda.zip .
        zip -r lambda.zip .
        popd

    - name: Configure AWS credentials (Test)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_TST }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_TST }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

    - name: Login to Amazon ECR (Test)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/amazon-ecr-login@v1.3.3

    - name: Push to Test
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: |
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/projector:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-api:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-ui:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/editor-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/product-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/syndication-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/wms-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/wfs-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-eventhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-extracthost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-commandhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-messaginghost-sqs:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/import-legacy:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_TST/road-registry/extract-legacy:$SEMVER

        echo Push Lambda functions to S3 Test
        pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.BackOffice.Handlers.Sqs.Lambda/linux
        echo aws s3 cp lambda.zip s3://s3-vbr-test-basisregisters-lam-wr-featurecompare-check/$SEMVER/lambda.zip
        aws s3 cp lambda.zip s3://s3-vbr-test-basisregisters-lam-wr-featurecompare-check/$SEMVER/lambda.zip
        echo aws s3 cp lambda.zip s3://s3-vbr-test-basisregisters-lam-wr-featurecompare-initiate/$SEMVER/lambda.zip
        aws s3 cp lambda.zip s3://s3-vbr-test-basisregisters-lam-wr-featurecompare-initiate/$SEMVER/lambda.zip
        popd
      env:
        BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
        SEMVER: ${{ env.RELEASE_VERSION }}
        WORKSPACE: ${{ github.workspace }}

    - name: Configure AWS credentials (Staging)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/configure-aws-credentials@v1.5.9
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.VBR_AWS_REGION }}

    - name: Login to Amazon ECR (Staging)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push to Staging
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: |
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/projector:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/projector:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-api:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-api:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-ui:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-ui:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/editor-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/editor-projectionhost:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/product-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/product-projectionhost:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/syndication-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/syndication-projectionhost:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/wms-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/wms-projectionhost:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/wfs-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/wfs-projectionhost:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-eventhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-eventhost:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-extracthost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-extracthost:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-commandhost:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-commandhost:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-messaginghost-sqs:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/backoffice-messaginghost-sqs:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/import-legacy:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/import-legacy:$SEMVER
        docker tag $BUILD_DOCKER_REGISTRY_TST/road-registry/extract-legacy:$SEMVER $BUILD_DOCKER_REGISTRY/road-registry/extract-legacy:$SEMVER

        docker push $BUILD_DOCKER_REGISTRY/road-registry/projector:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-api:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-ui:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/editor-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/product-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/syndication-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/wms-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/wfs-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-eventhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-extracthost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-commandhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/backoffice-messaginghost-sqs:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/import-legacy:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY/road-registry/extract-legacy:$SEMVER

        echo Push Lambda functions to S3 Staging
        pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.BackOffice.Handlers.Sqs.Lambda/linux
        echo aws s3 cp lambda.zip s3://s3-vbr-stg-basisregisters-lam-wr-featurecompare-check/$SEMVER/lambda.zip
        aws s3 cp lambda.zip s3://s3-vbr-stg-basisregisters-lam-wr-featurecompare-check/$SEMVER/lambda.zip
        echo aws s3 cp lambda.zip s3://s3-vbr-stg-basisregisters-lam-wr-featurecompare-initiate/$SEMVER/lambda.zip
        aws s3 cp lambda.zip s3://s3-vbr-stg-basisregisters-lam-wr-featurecompare-initiate/$SEMVER/lambda.zip
        popd
      env:
        BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
        BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY }}
        SEMVER: ${{ env.RELEASE_VERSION }}
        WORKSPACE: ${{ github.workspace }}

    - name: Configure AWS credentials (Production)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/configure-aws-credentials@v1.5.9
      with:
        aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_PRD }}
        aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_PRD }}
        aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

    - name: Login to Amazon ECR (Production)
      if: env.RELEASE_VERSION != 'none'
      uses: aws-actions/amazon-ecr-login@v1

    - name: Push to Production
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: |
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/projector:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/projector:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-ui:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/backoffice-ui:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-api:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/backoffice-api:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/editor-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/editor-projectionhost:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/product-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/product-projectionhost:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/syndication-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/syndication-projectionhost:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/wms-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/wms-projectionhost:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/wfs-projectionhost:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/wfs-projectionhost:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-eventhost:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/backoffice-eventhost:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-extracthost:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/backoffice-extracthost:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-commandhost:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/backoffice-commandhost:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/backoffice-messaginghost-sqs:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/backoffice-messaginghost-sqs:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/import-legacy:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/import-legacy:$SEMVER
        docker tag  $BUILD_DOCKER_REGISTRY_TST/road-registry/extract-legacy:$SEMVER $BUILD_DOCKER_REGISTRY_PRD/road-registry/extract-legacy:$SEMVER

        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/projector:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/backoffice-ui:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/backoffice-api:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/editor-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/product-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/syndication-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/wms-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/wfs-projectionhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/backoffice-eventhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/backoffice-extracthost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/backoffice-commandhost:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/backoffice-messaginghost-sqs:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/import-legacy:$SEMVER
        docker push $BUILD_DOCKER_REGISTRY_PRD/road-registry/extract-legacy:$SEMVER

        echo Push Lambda functions to S3 Production
        pushd /home/runner/work/road-registry/road-registry/dist/RoadRegistry.BackOffice.Handlers.Sqs.Lambda/linux
        echo aws s3 cp lambda.zip s3://s3-vbr-prd-basisregisters-lam-wr-featurecompare-check/$SEMVER/lambda.zip
        aws s3 cp lambda.zip s3://s3-vbr-prd-basisregisters-lam-wr-featurecompare-check/$SEMVER/lambda.zip
        echo aws s3 cp lambda.zip s3://s3-vbr-prd-basisregisters-lam-wr-featurecompare-initiate/$SEMVER/lambda.zip
        aws s3 cp lambda.zip s3://s3-vbr-prd-basisregisters-lam-wr-featurecompare-initiate/$SEMVER/lambda.zip
        popd
      env:
        BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
        BUILD_DOCKER_REGISTRY_PRD: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_PRD }}
        SEMVER: ${{ env.RELEASE_VERSION }}
        WORKSPACE: ${{ github.workspace }}
        
    - name: Publish to NuGet
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: |
        node $CI_NUGET_PATH/ci-nuget.js $LIB_PREFIX.BackOffice.Api.$SEMVER.nupkg
        node $CI_NUGET_PATH/ci-nuget.js $LIB_PREFIX.BackOffice.Abstractions.$SEMVER.nupkg
        node $CI_NUGET_PATH/ci-nuget.js $LIB_PREFIX.BackOffice.ZipArchiveWriters.$SEMVER.nupkg
      env:
        CI_NUGET_PATH: packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content
        LIB_PREFIX: dist/nuget/Be.Vlaanderen.Basisregisters.RoadRegistry
        SEMVER: ${{ env.RELEASE_VERSION }}
        NUGET_HOST: ${{ secrets.NUGET_HOST }}
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

    - name: Publish to Confluence
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-confluence.sh
      env:
        CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
        CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
        CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}

    - name: Create Jira Release
      if: env.RELEASE_VERSION != 'none'
      shell: bash
      run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-jira.sh
      env:
        CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
        CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
        CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}
        JIRA_PREFIX: Road
        JIRA_PROJECT: WR
        JIRA_VERSION: ${{ env.RELEASE_VERSION }}
