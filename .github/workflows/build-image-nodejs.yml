name: Build image NodeJS

on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
      build-project:
        required: true
        type: string
      image-file:
        required: true
        type: string
      image-name:
        required: true
        type: string
      semver:
        required: true
        type: string

jobs:
  build-image:
    runs-on: ubuntu-latest

    steps:

      - name: Check version
        shell: bash
        run: echo $SEMVER
        env:
          SEMVER: ${{ inputs.semver }}

      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Cache Paket
        uses: actions/cache@v4
        env:
          cache-name: cache-paket
        with:
          path: packages
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Node version
        shell: bash
        run: node --version

      - name: Install NPM dependencies
        shell: bash
        run: npm ci
        env:
          NPM_TOKEN: ${{ secrets.VBR_WEBCOMP_NPM_TOKEN }}

      - name: Build Project
        shell: bash
        run: |
          # Clean dist directory
          rm -rf "src/$BUILD_PROJECT/dist"

          cd "src/$BUILD_PROJECT"
          npm install
          npm run build
          cd ../..

          # Copy files
          buildDir="dist"
          dist="$buildDir/$BUILD_PROJECT/linux"
          source="src/$BUILD_PROJECT"

          mkdir "$dist" -p
          cp -r "$source/dist" "$dist/dist"
          cp "$source/default.conf.template" $dist
          cp "$source/Dockerfile" $dist
          cp "$source/init.sh" $dist

          echo "Print contents: $source/dist"
          cd "$source/dist"
          ls -als
          cd ../../..

          echo "Print contents: $dist/dist"
          cd "$dist/dist"
          ls -als
          cd ../../..
        env:
          NPM_TOKEN: ${{ secrets.VBR_WEBCOMP_NPM_TOKEN }}
          BUILD_PROJECT: ${{ inputs.build-project }}

      - name: Containerize
        shell: bash
        run: docker build . --no-cache --tag $TAG --build-arg BUILD_NUMBER=$SEMVER
        working-directory: dist/${{ inputs.build-project }}/linux
        env:
          TAG: ${{ inputs.registry }}/${{ inputs.image-name }}:${{ inputs.semver }}
          SEMVER: ${{ inputs.semver }}
    
      - name: Show images
        shell: bash
        run: docker images
    
      - name: Save Image
        if: inputs.semver != 'none'
        shell: bash
        run: docker image save ${{ inputs.registry }}/${{ inputs.image-name }}:$SEMVER -o ~/${{ inputs.image-file}}
        env:
          SEMVER: ${{ inputs.semver }}
    
      - name: Upload image
        if: inputs.semver != 'none'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image-name }}-${{ inputs.semver }}
          path: ~/${{ inputs.image-file }}
      
