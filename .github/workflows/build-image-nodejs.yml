name: Build image NodeJS

on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
      build-target:
        required: true
        type: string
      build-project:
        required: true
        type: string
      image-file:
        required: true
        type: string
      image-name:
        required: true
        type: string
      semver:
        required: true
        type: string

jobs:
  build-image:
    runs-on: ubuntu-latest

    steps:

      - name: Check version
        shell: bash
        run: echo $SEMVER
        env:
          SEMVER: ${{ inputs.semver }}

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Cache Paket
        uses: actions/cache@v3
        env:
          cache-name: cache-paket
        with:
          path: packages
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash
       
      - name: Cache NPM
        uses: actions/cache@v3
        env:
          cache-name: cache-npm
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ secrets.VBR_DOTNET_VERSION }}
      
      - name: .NET version
        shell: bash
        run: dotnet --info
  
      - name: Restore dotnet tools
        shell: bash
        run: |
          dotnet tool restore
  
      - name: Paket install
        shell: bash
        run: dotnet paket install

      - name: Setup Node.js
        uses: actions/setup-node@v3.5.1
        with:
          node-version: 18.12.1

      - name: Node version
        shell: bash
        run: node --version

      - name: Build UI
        shell: bash
        run: |
          cd ./src/$BUILD_PROJECT
          npm ci
          npm install
          npm run build
        env:
          NPM_TOKEN: ${{ secrets.VBR_WEBCOMP_NPM_TOKEN }}
          BUILD_PROJECT: ${{ inputs.build-project }}
  
      - name: Set Assembly Versions
        shell: bash
        run: CI_BUILD_NUMBER=$SEMVER ./build.sh SetAssemblyVersions
        env:          
          SEMVER: ${{ inputs.semver }}

      - name: Containerize
        shell: bash
        run: CI_BUILD_NUMBER=$SEMVER ./build.sh ${{ inputs.build-target }}
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          SEMVER: ${{ inputs.semver }}

      - name: Show images
        shell: bash
        run: docker images

      - name: Save Image
        if: inputs.semver != 'none'
        shell: bash
        run: docker image save $BUILD_DOCKER_REGISTRY/${{ inputs.registry }}/${{ inputs.image-name }}:$SEMVER -o ~/${{ inputs.image-file}}
        env:
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          SEMVER: ${{ inputs.semver }}

      - name: Upload image
        if: inputs.semver != 'none'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.image-name }}-${{ inputs.semver }}
          path: ~/${{ inputs.image-file }}
