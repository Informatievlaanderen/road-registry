// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoadRegistry.Projections;

namespace RoadRegistry.Projections.Migrations
{
    [DbContext(typeof(ShapeContext))]
    [Migration("20181001113452_AddShapeEnvelopeToShapeProjections")]
    partial class AddShapeEnvelopeToShapeProjections
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Aiv.Vbr.ProjectionHandling.Runner.ProjectionStates.ProjectionStateItem", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Position");

                    b.HasKey("Name")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("ProjectionStates","RoadRegistryProjectionMetaData");
                });

            modelBuilder.Entity("RoadRegistry.Projections.GradeSeparatedJunctionRecord", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte[]>("DbaseRecord");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("GradeSeparatedJunction","RoadRegistryShape");
                });

            modelBuilder.Entity("RoadRegistry.Projections.OrganizationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<byte[]>("DbaseRecord");

                    b.Property<string>("SortableCode");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Organization","RoadRegistryShape");
                });

            modelBuilder.Entity("RoadRegistry.Projections.RoadNodeRecord", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte[]>("DbaseRecord");

                    b.Property<byte[]>("ShapeRecordContent");

                    b.Property<int>("ShapeRecordContentLength");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RoadNode","RoadRegistryShape");
                });

            modelBuilder.Entity("RoadRegistry.Projections.RoadReferencePointRecord", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte[]>("DbaseRecord");

                    b.Property<byte[]>("ShapeRecordContent");

                    b.Property<int>("ShapeRecordContentLength");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RoadReferencePoint","RoadRegistryShape");
                });

            modelBuilder.Entity("RoadRegistry.Projections.RoadSegmentDynamicHardeningAttributeRecord", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte[]>("DbaseRecord");

                    b.Property<int>("RoadSegmentId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RoadSegmentHardeningAttribute","RoadRegistryShape");
                });

            modelBuilder.Entity("RoadRegistry.Projections.RoadSegmentDynamicLaneAttributeRecord", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte[]>("DbaseRecord");

                    b.Property<int>("RoadSegmentId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RoadSegmentLaneAttribute","RoadRegistryShape");
                });

            modelBuilder.Entity("RoadRegistry.Projections.RoadSegmentDynamicWidthAttributeRecord", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte[]>("DbaseRecord");

                    b.Property<int>("RoadSegmentId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RoadSegmentWidthAttribute","RoadRegistryShape");
                });

            modelBuilder.Entity("RoadRegistry.Projections.RoadSegmentEuropeanRoadAttributeRecord", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte[]>("DbaseRecord");

                    b.Property<int>("RoadSegmentId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RoadSegmentEuropeanRoadAttribute","RoadRegistryShape");
                });

            modelBuilder.Entity("RoadRegistry.Projections.RoadSegmentNationalRoadAttributeRecord", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte[]>("DbaseRecord");

                    b.Property<int>("RoadSegmentId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RoadSegmentNationalRoadAttribute","RoadRegistryShape");
                });

            modelBuilder.Entity("RoadRegistry.Projections.RoadSegmentNumberedRoadAttributeRecord", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte[]>("DbaseRecord");

                    b.Property<int>("RoadSegmentId");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RoadSegmentNumberedRoadAttribute","RoadRegistryShape");
                });

            modelBuilder.Entity("RoadRegistry.Projections.RoadSegmentRecord", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte[]>("DbaseRecord");

                    b.Property<byte[]>("ShapeRecordContent");

                    b.Property<int>("ShapeRecordContentLength");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("RoadSegment","RoadRegistryShape");
                });

            modelBuilder.Entity("RoadRegistry.Projections.RoadNodeRecord", b =>
                {
                    b.OwnsOne("RoadRegistry.Projections.EnvelopePartialRecord", "Envelope", b1 =>
                        {
                            b1.Property<int>("RoadNodeRecordId");

                            b1.Property<double>("MaximumX");

                            b1.Property<double>("MaximumY");

                            b1.Property<double>("MinimumX");

                            b1.Property<double>("MinimumY");

                            b1.ToTable("RoadNode","RoadRegistryShape");

                            b1.HasOne("RoadRegistry.Projections.RoadNodeRecord")
                                .WithOne("Envelope")
                                .HasForeignKey("RoadRegistry.Projections.EnvelopePartialRecord", "RoadNodeRecordId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("RoadRegistry.Projections.RoadReferencePointRecord", b =>
                {
                    b.OwnsOne("RoadRegistry.Projections.EnvelopePartialRecord", "Envelope", b1 =>
                        {
                            b1.Property<int>("RoadReferencePointRecordId");

                            b1.Property<double>("MaximumX");

                            b1.Property<double>("MaximumY");

                            b1.Property<double>("MinimumX");

                            b1.Property<double>("MinimumY");

                            b1.ToTable("RoadReferencePoint","RoadRegistryShape");

                            b1.HasOne("RoadRegistry.Projections.RoadReferencePointRecord")
                                .WithOne("Envelope")
                                .HasForeignKey("RoadRegistry.Projections.EnvelopePartialRecord", "RoadReferencePointRecordId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("RoadRegistry.Projections.RoadSegmentRecord", b =>
                {
                    b.OwnsOne("RoadRegistry.Projections.EnvelopePartialRecord", "Envelope", b1 =>
                        {
                            b1.Property<int>("RoadSegmentRecordId");

                            b1.Property<double>("MaximumX");

                            b1.Property<double>("MaximumY");

                            b1.Property<double>("MinimumX");

                            b1.Property<double>("MinimumY");

                            b1.ToTable("RoadSegment","RoadRegistryShape");

                            b1.HasOne("RoadRegistry.Projections.RoadSegmentRecord")
                                .WithOne("Envelope")
                                .HasForeignKey("RoadRegistry.Projections.EnvelopePartialRecord", "RoadSegmentRecordId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
