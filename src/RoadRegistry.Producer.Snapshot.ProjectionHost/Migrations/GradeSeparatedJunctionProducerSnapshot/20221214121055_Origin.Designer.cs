// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoadRegistry.Producer.Snapshot.ProjectionHost.GradeSeparatedJunction;

#nullable disable

namespace RoadRegistry.Producer.Snapshot.ProjectionHost.Migrations.GradeSeparatedJunctionProducerSnapshot
{
    [DbContext(typeof(GradeSeparatedJunctionProducerSnapshotContext))]
    [Migration("20221214121055_Origin")]
    partial class Origin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Be.Vlaanderen.Basisregisters.ProjectionHandling.Runner.ProjectionStates.ProjectionStateItem", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DesiredState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DesiredStateChangedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.HasKey("Name");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Name"));

                    b.ToTable("ProjectionStates", "RoadRegistryGradeSeparatedJunctionProducerSnapshotMetaSchema");
                });

            modelBuilder.Entity("RoadRegistry.Producer.Snapshot.ProjectionHost.GradeSeparatedJunction.GradeSeparatedJunctionRecord", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastChangedTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LowerRoadSegmentId")
                        .HasColumnType("int");

                    b.Property<string>("TypeDutchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UpperRoadSegmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("GradeSeparatedJunction", "RoadRegistryGradeSeparatedJunctionProducerSnapshotSchema");
                });

            modelBuilder.Entity("RoadRegistry.Producer.Snapshot.ProjectionHost.GradeSeparatedJunction.GradeSeparatedJunctionRecord", b =>
                {
                    b.OwnsOne("RoadRegistry.Producer.Snapshot.ProjectionHost.Schema.Origin", "Origin", b1 =>
                        {
                            b1.Property<int>("GradeSeparatedJunctionRecordId")
                                .HasColumnType("int");

                            b1.Property<string>("Organization")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset?>("Timestamp")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("GradeSeparatedJunctionRecordId");

                            b1.ToTable("GradeSeparatedJunction", "RoadRegistryGradeSeparatedJunctionProducerSnapshotSchema");

                            b1.WithOwner()
                                .HasForeignKey("GradeSeparatedJunctionRecordId");
                        });

                    b.Navigation("Origin");
                });
#pragma warning restore 612, 618
        }
    }
}
